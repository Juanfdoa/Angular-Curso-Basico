{"ast":null,"code":"import { Employee } from './employee.componet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./employee-service.service\";\nimport * as i2 from \"./data.services\";\nclass DataServiceService {\n  constructor(serviceEmergentWondows, httpClient) {\n    this.serviceEmergentWondows = serviceEmergentWondows;\n    this.httpClient = httpClient;\n    this.employees = [new Employee(\"Juan\", \"Acevedo\", \"Fullstack\", 1500000), new Employee(\"Carlos\", \"Perez\", \"Backend\", 1300000), new Employee(\"Andrea\", \"Duarte\", \"Fullstack\", 1500000), new Employee(\"Laura\", \"Diaz\", \"Frontend\", 1400000)];\n  }\n  addEmployeeService(employee) {\n    this.serviceEmergentWondows.ShowMessage('Name: ' + employee.name + ' ' + employee.surname);\n    this.employees.push(employee);\n    this.httpClient.saveEmployees(this.employees);\n  }\n  findEmployee(indice) {\n    let employee = this.employees[indice];\n    return employee;\n  }\n  updateEmployeeService(indice, employee) {\n    let employeeUpdated = this.employees[indice];\n    employeeUpdated.name = employee.name;\n    employeeUpdated.surname = employee.surname;\n    employeeUpdated.charge = employee.charge;\n    employeeUpdated.salary = employee.salary;\n  }\n  deleteEmployeeService(indice) {\n    this.employees.splice(indice, 1);\n  }\n}\nDataServiceService.ɵfac = function DataServiceService_Factory(t) {\n  return new (t || DataServiceService)(i0.ɵɵinject(i1.EmployeeServiceService), i0.ɵɵinject(i2.DataServices));\n};\nDataServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataServiceService,\n  factory: DataServiceService.ɵfac,\n  providedIn: 'root'\n});\nexport { DataServiceService };","map":{"version":3,"names":["Employee","DataServiceService","constructor","serviceEmergentWondows","httpClient","employees","addEmployeeService","employee","ShowMessage","name","surname","push","saveEmployees","findEmployee","indice","updateEmployeeService","employeeUpdated","charge","salary","deleteEmployeeService","splice","i0","ɵɵinject","i1","EmployeeServiceService","i2","DataServices","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Juan.acevedo\\Desktop\\Cursos\\Angular\\employeesApp\\src\\app\\data-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Employee } from './employee.componet';\nimport { EmployeeServiceService } from './employee-service.service';\nimport { DataServices } from './data.services';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataServiceService {\n\n  constructor(private serviceEmergentWondows: EmployeeServiceService, private httpClient:DataServices) {\n    \n\n  }\n\n  \n\n  addEmployeeService(employee:Employee){\n    this.serviceEmergentWondows.ShowMessage('Name: ' + employee.name + ' ' + employee.surname)\n    this.employees.push(employee);\n\n    this.httpClient.saveEmployees(this.employees);\n  }\n  employees: Employee[]=[\n\n    new Employee(\"Juan\",\"Acevedo\",\"Fullstack\", 1500000),\n    new Employee(\"Carlos\",\"Perez\",\"Backend\", 1300000),\n    new Employee(\"Andrea\",\"Duarte\",\"Fullstack\", 1500000),\n    new Employee(\"Laura\",\"Diaz\",\"Frontend\", 1400000),\n  ];\n\n  findEmployee(indice:number){\n\n    let employee:Employee = this.employees[indice];\n    return employee;\n  }\n\n  updateEmployeeService(indice:number, employee:Employee){\n    let employeeUpdated = this.employees[indice];\n    employeeUpdated.name = employee.name;\n    employeeUpdated.surname = employee.surname;\n    employeeUpdated.charge = employee.charge;\n    employeeUpdated.salary = employee.salary;\n  }\n\n  deleteEmployeeService(indice:number){\n    this.employees.splice(indice,1);\n  }\n}\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,qBAAqB;;;;AAI9C,MAGaC,kBAAkB;EAE7BC,YAAoBC,sBAA8C,EAAUC,UAAuB;IAA/E,KAAAD,sBAAsB,GAAtBA,sBAAsB;IAAkC,KAAAC,UAAU,GAAVA,UAAU;IAatF,KAAAC,SAAS,GAAa,CAEpB,IAAIL,QAAQ,CAAC,MAAM,EAAC,SAAS,EAAC,WAAW,EAAE,OAAO,CAAC,EACnD,IAAIA,QAAQ,CAAC,QAAQ,EAAC,OAAO,EAAC,SAAS,EAAE,OAAO,CAAC,EACjD,IAAIA,QAAQ,CAAC,QAAQ,EAAC,QAAQ,EAAC,WAAW,EAAE,OAAO,CAAC,EACpD,IAAIA,QAAQ,CAAC,OAAO,EAAC,MAAM,EAAC,UAAU,EAAE,OAAO,CAAC,CACjD;EAhBD;EAIAM,kBAAkBA,CAACC,QAAiB;IAClC,IAAI,CAACJ,sBAAsB,CAACK,WAAW,CAAC,QAAQ,GAAGD,QAAQ,CAACE,IAAI,GAAG,GAAG,GAAGF,QAAQ,CAACG,OAAO,CAAC;IAC1F,IAAI,CAACL,SAAS,CAACM,IAAI,CAACJ,QAAQ,CAAC;IAE7B,IAAI,CAACH,UAAU,CAACQ,aAAa,CAAC,IAAI,CAACP,SAAS,CAAC;EAC/C;EASAQ,YAAYA,CAACC,MAAa;IAExB,IAAIP,QAAQ,GAAY,IAAI,CAACF,SAAS,CAACS,MAAM,CAAC;IAC9C,OAAOP,QAAQ;EACjB;EAEAQ,qBAAqBA,CAACD,MAAa,EAAEP,QAAiB;IACpD,IAAIS,eAAe,GAAG,IAAI,CAACX,SAAS,CAACS,MAAM,CAAC;IAC5CE,eAAe,CAACP,IAAI,GAAGF,QAAQ,CAACE,IAAI;IACpCO,eAAe,CAACN,OAAO,GAAGH,QAAQ,CAACG,OAAO;IAC1CM,eAAe,CAACC,MAAM,GAAGV,QAAQ,CAACU,MAAM;IACxCD,eAAe,CAACE,MAAM,GAAGX,QAAQ,CAACW,MAAM;EAC1C;EAEAC,qBAAqBA,CAACL,MAAa;IACjC,IAAI,CAACT,SAAS,CAACe,MAAM,CAACN,MAAM,EAAC,CAAC,CAAC;EACjC;;AAvCWb,kBAAkB,C;mBAAlBA,kBAAkB,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,sBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;AAAA;AAAlBzB,kBAAkB,C;SAAlBA,kBAAkB;EAAA0B,OAAA,EAAlB1B,kBAAkB,CAAA2B,IAAA;EAAAC,UAAA,EAFjB;AAAM;SAEP5B,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}